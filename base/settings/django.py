"""
Django settings for Backpack project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from decouple import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
PROJECT = config('ENV_PROJECT', os.path.basename(BASE_DIR))
UI_DIR = os.path.join(BASE_DIR, '../dist')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = config('DEBUG', False)

# ALLOWED_HOSTS = ['*'] if DEBUG else list(
#     set('.'.join([''] + x.rsplit('.', 2)[-2:]) for x in config('ENV_SITES', '').split(' ')))

ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']

# Application List
APP_LIST = eval(config('APP_LIST', '[]'))
# APP_LIST=['user','autotest','manual_test','cricket','jira_integration']
# Application definition

INSTALLED_APPS = [
                     'django.contrib.admin',
                     'django.contrib.auth',
                     'django.contrib.contenttypes',
                     'django.contrib.sessions',
                     'django.contrib.messages',
                     'django.contrib.staticfiles',
                     'rest_framework',
                     'rest_framework_swagger',
                 ] + APP_LIST

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'base.urls.api'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [UI_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE':   'django.db.backends.postgresql',
        'NAME':     config('DATABASE_NAME', PROJECT + '_' + config('SITE')).lower(),
        'USER':     config('DATABASE_USER', 'root'),
        'PASSWORD': config('DATABASE_PASSWORD', 'root'),
        'HOST':     config('DATABASE_HOST', 'root'),
        'PORT':     config('DATABASE_PORT', ''),
        'OPTIONS':  {
        },
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': 'nimbus',
#     }
# }

# DATABASES = {
#         'default': {
#             'ENGINE': 'djongo',
#             'NAME': 'enk-simba',
#             'ENFORCE_SCHEMA': False,
#             'CLIENT': {
#                 'host': 'mongodb+srv://beaumont:Beaumont%40123@beaumont.3nsb6te.mongodb.net/?retryWrites=true&w=majority'
#             }
#         }
# }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = True

USE_TZ = True

# Ind-time-zone on django-admin
TIME_ZONE = 'Asia/Kolkata'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    UI_DIR
]

# AWS_STORAGE_BUCKET_NAME = config('ENV_AWS_STORAGE_BUCKET_NAME')
# if AWS_STORAGE_BUCKET_NAME and not DEBUG:
#     AWS_ACCESS_KEY_ID = config('ENV_AWS_ACCESS_KEY_ID')
#     AWS_SECRET_ACCESS_KEY = config('ENV_AWS_SECRET_ACCESS_KEY')
#     AWS_S3_SIGNATURE_VERSION = config('ENV_AWS_S3_SIGNATURE_VERSION', 's3v4')
#     AWS_S3_REGION_NAME = config('ENV_AWS_S3_REGION_NAME', 'us-east-1')
#     AWS_S3_FILE_OVERWRITE = config('ENV_AWS_S3_FILE_OVERWRITE', False)
#     AWS_DEFAULT_ACL = None
#     AWS_S3_VERIFY = bool(config('ENV_AWS_S3_VERIFY', False))
#
#     DEFAULT_FILE_STORAGE = 'base.storages.MediaStorage'
#

STORAGE_TYPE = config('STORAGE_TYPE', 'local')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

AZURE_ACCOUNT_NAME = config('AZURE_ACCOUNT_NAME')
AZURE_ACCOUNT_KEY = config('AZURE_ACCOUNT_KEY')
AZURE_CONTAINER = config('AZURE_CONTAINER')

if STORAGE_TYPE == 's3':
    DEFAULT_FILE_STORAGE = 'base.storages.S3Storage'
elif STORAGE_TYPE == 'azure':
    DEFAULT_FILE_STORAGE = 'base.storages.AzureBlobStorage'
else:
    DEFAULT_FILE_STORAGE = 'base.storages.BaseStorage'


# Debug Toolbar
if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    INTERNAL_IPS = ['127.0.0.1']
else:
    INSTALLED_APPS += [
        'django.contrib.sites',
    ]
    MIDDLEWARE += [
        'django.contrib.sites.middleware.CurrentSiteMiddleware',

        'base.middleware.APIMiddleware',
    ]

# rest_framework
REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'base.api.views.exception_handler',
}
is_cors_enabled = config("ENV_CORS_ALLOW_ALL_ORIGINS", False) or DEBUG
if is_cors_enabled:
    CORS_ALLOW_ALL_ORIGINS = True
    INSTALLED_APPS += ['corsheaders']
    # CorsMiddleware good to add before of CommonMiddleware on response/request.
    MIDDLEWARE.insert(2, "corsheaders.middleware.CorsMiddleware")

CACHE_EXPIRY = config('ENV_CACHE_EXPIRY', 86400)

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend'
]
